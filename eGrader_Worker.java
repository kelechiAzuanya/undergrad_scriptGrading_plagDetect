
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smartGrader.GUI;

import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import javax.imageio.ImageIO;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import smartGrader.Database.DatabaseConnection;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import smartGrader.Plagiarism.customCoded;
import smartGrader.Plagiarism.populateList;
import smartGrader.Plagiarism.runPlagTest;
import smartGrader.scriptGrading.MarkScript;
import smartGrader.scriptGrading.PerformanceCalculation;
import smartGrader.scriptGrading.ViewPDF;

/**
 *
 * @author LabaPc
 */
public class eGrader_Worker extends javax.swing.JFrame {

    Map<String, String> tempFileHolder = new HashMap<>();
    PreparedStatement myStmt = null;
    ResultSet myRs = null;
    Connection myConn = null;
    Map<String, Map<String, Double>> CosineValues;
    ViewPDF vw = new ViewPDF();
    String variableScriptName = null;
    JFrame backContainer = this;
    int x, y = 0;
    boolean canMark = false;
    Boolean isMarkingComplete = false;
    public static ArrayList<Double> CurrentScore = new ArrayList<>();
    String currentScript = null;
    int statusFlag = 0;  //complete==1; incomplete==2; ungraded=null;
    String currentAdmin = null;

    /**
     * Creates new form backConatiner
     */
    public eGrader_Worker(String currentAdmin) {
        initComponents();
        jProgressBar1.setVisible(false);
        this.currentAdmin = currentAdmin;
        this.setTitle(currentAdmin + " CURRRENTLY LOGGED IN");
        jMenuUXX.setText(currentAdmin + " CURRRENTLY LOGGED IN");
    //    initialiseStanfordLib();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelViews = new javax.swing.JPanel();
        jPanelViewScript1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDisplayScripts = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jPanelViewScript2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListDisplayFeedBack = new javax.swing.JList<>();
        jPanelProp = new javax.swing.JPanel();
        jPanelScore = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldPen = new javax.swing.JTextField();
        jTextFieldTTS = new javax.swing.JTextField();
        jTextFieldObt = new javax.swing.JTextField();
        jTextFieldOldScore = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldCurrentScore = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldAddScore = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldSubScore = new javax.swing.JTextField();
        jButtonAdd = new javax.swing.JButton();
        jButtonSub = new javax.swing.JButton();
        jPanelPlag = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListPlagiarismCheck = new javax.swing.JList<>();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanelGrader = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneMarkSpace = new javax.swing.JTextPane();
        jPanelFooter = new javax.swing.JPanel();
        jButtonComplete = new javax.swing.JButton();
        jButtonInComplete = new javax.swing.JButton();
        jButtonFeedBack = new javax.swing.JButton();
        jButtonSaveDoc = new javax.swing.JButton();
        jButtonCloseDoc = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCreateAssgn = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuDownloadScripts = new javax.swing.JMenu();
        jMenuRunPlagCheck = new javax.swing.JMenu();
        jMenuView = new javax.swing.JMenu();
        jMenuItemStudentPerformanceReport = new javax.swing.JMenuItem();
        jMenuItemFeedBack = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemViewGradedScripts = new javax.swing.JMenuItem();
        jMenuItemViewPartiallyGraded = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemViewUngraded = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItemPlagiarismChart = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemClrScriptList = new javax.swing.JMenuItem();
        jMenuItemClearPlagList = new javax.swing.JMenuItem();
        jMenuItemClearFeedBack = new javax.swing.JMenuItem();
        jMenuUXX = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        setForeground(new java.awt.Color(255, 51, 51));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(883, 750));
        setResizable(false);

        jPanelViews.setBackground(new java.awt.Color(153, 153, 153));
        jPanelViews.setPreferredSize(new java.awt.Dimension(300, 400));
        jPanelViews.setLayout(new java.awt.GridBagLayout());

        jPanelViewScript1.setPreferredSize(new java.awt.Dimension(300, 390));
        jPanelViewScript1.setLayout(new java.awt.BorderLayout(10, 0));

        jListDisplayScripts.setBackground(new java.awt.Color(153, 153, 153));
        jListDisplayScripts.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jListDisplayScripts.setForeground(new java.awt.Color(255, 255, 204));
        jListDisplayScripts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDisplayScripts.setFixedCellHeight(25);
        jListDisplayScripts.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDisplayScriptsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListDisplayScripts);

        jPanelViewScript1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Scripts");
        jLabel5.setMinimumSize(new java.awt.Dimension(40, 40));
        jLabel5.setPreferredSize(new java.awt.Dimension(40, 40));
        jPanelViewScript1.add(jLabel5, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.6;
        jPanelViews.add(jPanelViewScript1, gridBagConstraints);

        jPanelViewScript2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(153, 153, 153)));
        jPanelViewScript2.setPreferredSize(new java.awt.Dimension(300, 380));
        jPanelViewScript2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(" FeedBacks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelViewScript2.add(jLabel2, gridBagConstraints);

        jListDisplayFeedBack.setBackground(new java.awt.Color(153, 153, 153));
        jListDisplayFeedBack.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jListDisplayFeedBack.setForeground(new java.awt.Color(255, 255, 204));
        jListDisplayFeedBack.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDisplayFeedBackValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListDisplayFeedBack);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelViewScript2.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 0.3;
        jPanelViews.add(jPanelViewScript2, gridBagConstraints);

        getContentPane().add(jPanelViews, java.awt.BorderLayout.WEST);

        jPanelProp.setBackground(new java.awt.Color(153, 153, 153));
        jPanelProp.setPreferredSize(new java.awt.Dimension(300, 400));
        jPanelProp.setLayout(new java.awt.GridBagLayout());

        jPanelScore.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        jPanelScore.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jPanelScore.setMinimumSize(new java.awt.Dimension(200, 200));
        jPanelScore.setPreferredSize(new java.awt.Dimension(200, 290));
        jPanelScore.setVerifyInputWhenFocusTarget(false);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Score");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("Penalty");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("Total Score");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 204));
        jLabel7.setText("Score Obtainable");

        jTextFieldPen.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldPen.setText("0");
        jTextFieldPen.setPreferredSize(new java.awt.Dimension(50, 25));

        jTextFieldTTS.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldTTS.setText("0");
        jTextFieldTTS.setPreferredSize(new java.awt.Dimension(50, 25));

        jTextFieldObt.setEditable(false);
        jTextFieldObt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldObt.setText("0");
        jTextFieldObt.setPreferredSize(new java.awt.Dimension(50, 25));

        jTextFieldOldScore.setEditable(false);
        jTextFieldOldScore.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldOldScore.setText("0");
        jTextFieldOldScore.setPreferredSize(new java.awt.Dimension(50, 25));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 204));
        jLabel10.setText("Old Score");

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 204));
        jLabel11.setText("Current Score");

        jTextFieldCurrentScore.setEditable(false);
        jTextFieldCurrentScore.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldCurrentScore.setText("0");
        jTextFieldCurrentScore.setPreferredSize(new java.awt.Dimension(50, 25));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 204));
        jLabel12.setText("Add Score");

        jTextFieldAddScore.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldAddScore.setText("0");
        jTextFieldAddScore.setPreferredSize(new java.awt.Dimension(50, 25));
        jTextFieldAddScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAddScoreActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 204));
        jLabel13.setText("Add Score");

        jTextFieldSubScore.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTextFieldSubScore.setText("0");
        jTextFieldSubScore.setPreferredSize(new java.awt.Dimension(50, 25));
        jTextFieldSubScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSubScoreActionPerformed(evt);
            }
        });

        jButtonAdd.setFont(new java.awt.Font("Century Gothic", 0, 8)); // NOI18N
        jButtonAdd.setText("Add");
        jButtonAdd.setEnabled(false);
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonSub.setFont(new java.awt.Font("Century Gothic", 0, 8)); // NOI18N
        jButtonSub.setText("Sub");
        jButtonSub.setEnabled(false);

        javax.swing.GroupLayout jPanelScoreLayout = new javax.swing.GroupLayout(jPanelScore);
        jPanelScore.setLayout(jPanelScoreLayout);
        jPanelScoreLayout.setHorizontalGroup(
            jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelScoreLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelScoreLayout.createSequentialGroup()
                        .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelScoreLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldSubScore, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelScoreLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldAddScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelScoreLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel1)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelScoreLayout.createSequentialGroup()
                        .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelScoreLayout.createSequentialGroup()
                                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldOldScore, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(jTextFieldObt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldPen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldTTS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanelScoreLayout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldCurrentScore, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(jButtonSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(52, 52, 52))))
        );
        jPanelScoreLayout.setVerticalGroup(
            jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelScoreLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldPen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldTTS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldObt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOldScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldCurrentScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextFieldAddScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanelScoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextFieldSubScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSub))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanelProp.add(jPanelScore, gridBagConstraints);

        jPanelPlag.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 1, true));
        jPanelPlag.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanelPlag.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 204));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Plagiarism report");
        jLabel8.setPreferredSize(new java.awt.Dimension(125, 30));
        jPanelPlag.add(jLabel8, java.awt.BorderLayout.NORTH);

        jScrollPane4.setHorizontalScrollBar(null);
        jScrollPane4.setPreferredSize(new java.awt.Dimension(182, 100));

        jListPlagiarismCheck.setBackground(new java.awt.Color(153, 153, 153));
        jListPlagiarismCheck.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jListPlagiarismCheck.setForeground(new java.awt.Color(255, 255, 204));
        jListPlagiarismCheck.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListPlagiarismCheckValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jListPlagiarismCheck);

        jPanelPlag.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jProgressBar1.setForeground(new java.awt.Color(102, 204, 0));
        jPanelPlag.add(jProgressBar1, java.awt.BorderLayout.PAGE_END);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        jPanelProp.add(jPanelPlag, gridBagConstraints);

        getContentPane().add(jPanelProp, java.awt.BorderLayout.EAST);

        jPanelGrader.setBackground(new java.awt.Color(255, 255, 255));
        jPanelGrader.setPreferredSize(new java.awt.Dimension(800, 400));
        jPanelGrader.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(800, 400));
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        jTextPaneMarkSpace.setEditable(false);
        jTextPaneMarkSpace.setPreferredSize(new java.awt.Dimension(800, 400));
        jTextPaneMarkSpace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextPaneMarkSpaceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPaneMarkSpace);

        jPanelGrader.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelGrader, java.awt.BorderLayout.CENTER);

        jPanelFooter.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 1, true));
        jPanelFooter.setPreferredSize(new java.awt.Dimension(1203, 50));
        jPanelFooter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 8, 10));

        jButtonComplete.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButtonComplete.setText("Marking Complete");
        jButtonComplete.setEnabled(false);
        jButtonComplete.setMargin(new java.awt.Insets(5, 14, 5, 14));
        jButtonComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompleteActionPerformed(evt);
            }
        });
        jPanelFooter.add(jButtonComplete);

        jButtonInComplete.setBackground(java.awt.Color.lightGray);
        jButtonInComplete.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButtonInComplete.setText("Marking InComplete");
        jButtonInComplete.setEnabled(false);
        jButtonInComplete.setMargin(new java.awt.Insets(5, 14, 5, 14));
        jButtonInComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInCompleteActionPerformed(evt);
            }
        });
        jPanelFooter.add(jButtonInComplete);

        jButtonFeedBack.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButtonFeedBack.setText("Send FeedBack");
        jButtonFeedBack.setEnabled(false);
        jButtonFeedBack.setMargin(new java.awt.Insets(5, 14, 5, 14));
        jButtonFeedBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFeedBackActionPerformed(evt);
            }
        });
        jPanelFooter.add(jButtonFeedBack);

        jButtonSaveDoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Save_48px.png"))); // NOI18N
        jButtonSaveDoc.setText("Save Doc");
        jButtonSaveDoc.setEnabled(false);
        jButtonSaveDoc.setPreferredSize(new java.awt.Dimension(120, 31));
        jButtonSaveDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDocActionPerformed(evt);
            }
        });
        jPanelFooter.add(jButtonSaveDoc);

        jButtonCloseDoc.setText("Close Doc");
        jButtonCloseDoc.setEnabled(false);
        jButtonCloseDoc.setPreferredSize(new java.awt.Dimension(81, 31));
        jButtonCloseDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseDocActionPerformed(evt);
            }
        });
        jPanelFooter.add(jButtonCloseDoc);

        getContentPane().add(jPanelFooter, java.awt.BorderLayout.SOUTH);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setAutoscrolls(true);

        jMenu1.setForeground(new java.awt.Color(0, 0, 204));
        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/File_48px.png"))); // NOI18N
        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenu1.setMargin(new java.awt.Insets(10, 35, 10, 35));

        jMenuItemCreateAssgn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        jMenuItemCreateAssgn.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemCreateAssgn.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemCreateAssgn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Support_50px.png"))); // NOI18N
        jMenuItemCreateAssgn.setText("Create Assignment");
        jMenuItemCreateAssgn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreateAssgnActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCreateAssgn);
        jMenu1.add(jSeparator3);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItem2.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Download_16px.png"))); // NOI18N
        jMenuItem2.setText("Download From web");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenuDownloadScripts.setForeground(new java.awt.Color(0, 0, 204));
        jMenuDownloadScripts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Upload_16px.png"))); // NOI18N
        jMenuDownloadScripts.setText("Upload Scripts");
        jMenuDownloadScripts.setActionCommand("UpLoad Scripts");
        jMenuDownloadScripts.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuDownloadScripts.setMargin(new java.awt.Insets(10, 35, 10, 35));
        jMenuDownloadScripts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuDownloadScriptsMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuDownloadScripts);

        jMenuRunPlagCheck.setForeground(new java.awt.Color(0, 0, 204));
        jMenuRunPlagCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Preview Pane_50px.png"))); // NOI18N
        jMenuRunPlagCheck.setText("Run Plagiarism Check");
        jMenuRunPlagCheck.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuRunPlagCheck.setMargin(new java.awt.Insets(10, 35, 10, 35));
        jMenuRunPlagCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuRunPlagCheckMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuRunPlagCheck);

        jMenuView.setForeground(new java.awt.Color(0, 0, 204));
        jMenuView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/view_50px.png"))); // NOI18N
        jMenuView.setText("Views");
        jMenuView.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuView.setMargin(new java.awt.Insets(10, 35, 10, 35));

        jMenuItemStudentPerformanceReport.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemStudentPerformanceReport.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemStudentPerformanceReport.setText("Student Performance Report");
        jMenuItemStudentPerformanceReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemStudentPerformanceReportMouseClicked(evt);
            }
        });
        jMenuItemStudentPerformanceReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStudentPerformanceReportActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemStudentPerformanceReport);

        jMenuItemFeedBack.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemFeedBack.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemFeedBack.setText("Feedbacks");
        jMenuItemFeedBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFeedBackActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemFeedBack);

        jSeparator1.setForeground(new java.awt.Color(0, 102, 51));
        jMenuView.add(jSeparator1);

        jMenuItemViewGradedScripts.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemViewGradedScripts.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemViewGradedScripts.setText("Graded Scripts");
        jMenuItemViewGradedScripts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewGradedScriptsActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemViewGradedScripts);

        jMenuItemViewPartiallyGraded.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemViewPartiallyGraded.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemViewPartiallyGraded.setText("Partially Graded");
        jMenuItemViewPartiallyGraded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewPartiallyGradedActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemViewPartiallyGraded);
        jMenuView.add(jSeparator4);

        jMenuItemViewUngraded.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemViewUngraded.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemViewUngraded.setText("UnGraded Scripts");
        jMenuItemViewUngraded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewUngradedActionPerformed(evt);
            }
        });
        jMenuView.add(jMenuItemViewUngraded);

        jMenuBar1.add(jMenuView);

        jMenu7.setForeground(new java.awt.Color(0, 0, 204));
        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Bar Chart_50px.png"))); // NOI18N
        jMenu7.setText("Charts");
        jMenu7.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenu7.setMargin(new java.awt.Insets(10, 35, 10, 35));

        jMenuItemPlagiarismChart.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemPlagiarismChart.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemPlagiarismChart.setText("Plagiarism ");
        jMenuItemPlagiarismChart.setEnabled(false);
        jMenuItemPlagiarismChart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemPlagiarismChartMouseClicked(evt);
            }
        });
        jMenuItemPlagiarismChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlagiarismChartActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItemPlagiarismChart);
        jMenu7.add(jSeparator2);

        jMenuItem4.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItem4.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItem4.setText("Students Performance");
        jMenu7.add(jMenuItem4);

        jMenuBar1.add(jMenu7);

        jMenu2.setForeground(new java.awt.Color(0, 0, 204));
        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Trash Can_48px.png"))); // NOI18N
        jMenu2.setText("Clear");
        jMenu2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenu2.setMargin(new java.awt.Insets(10, 35, 10, 35));

        jMenuItemClrScriptList.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemClrScriptList.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemClrScriptList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Trash Can_50px.png"))); // NOI18N
        jMenuItemClrScriptList.setText("Clear Script List");
        jMenuItemClrScriptList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClrScriptListActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemClrScriptList);

        jMenuItemClearPlagList.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemClearPlagList.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemClearPlagList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Trash Cann_50px.png"))); // NOI18N
        jMenuItemClearPlagList.setText("Clear Plag. List");
        jMenuItemClearPlagList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearPlagListActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemClearPlagList);

        jMenuItemClearFeedBack.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItemClearFeedBack.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItemClearFeedBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/Trash Can_50px.png"))); // NOI18N
        jMenuItemClearFeedBack.setText("Clear FeedBack");
        jMenuItemClearFeedBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearFeedBackActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemClearFeedBack);

        jMenuBar1.add(jMenu2);

        jMenuUXX.setForeground(new java.awt.Color(0, 0, 204));
        jMenuUXX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/User_24px.png"))); // NOI18N
        jMenuUXX.setText("USER CURRENTLY LOGGED IN");
        jMenuUXX.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jMenuItem1.setForeground(new java.awt.Color(0, 0, 204));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartGrader/images/outl.jpg"))); // NOI18N
        jMenuItem1.setText("LogOut");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuUXX.add(jMenuItem1);

        jMenuBar1.add(jMenuUXX);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void readFolder() {
        /**
         * The read folder() loops through the selected folder reads the file
         * and cannonical path storing it in a map whose content are accessed
         * and displayed on the Jlist which has a valuechange listener to get
         * the value of the jListener
         */
        String fileName;
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        File di = new File(System.getProperty("user.home") + "/Desktop");
        fc.setCurrentDirectory(di);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // folderName = JOptionPane.showInputDialog(this, "Enter a folder Name", "Folder Name", JOptionPane.INFORMATION_MESSAGE);

            File dir = fc.getSelectedFile();
            if (dir.isFile()) {
                try {
                    fileName = dir.getName();
                    String path = dir.getCanonicalPath();

                    tempFileHolder.put(fileName, path);
                } catch (IOException ex) {
                    Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                File[] FileList = dir.listFiles();
                for (int i = 0; i < FileList.length; i++) {
                    try {
                        fileName = FileList[i].getName();
                        String path;

                        path = FileList[i].getCanonicalPath();

                        tempFileHolder.put(fileName, path);

                        //    }
                    } catch (IOException ex) {
                        Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            Set<Map.Entry<String, String>> hashSet = tempFileHolder.entrySet();
            DefaultListModel listModel = new DefaultListModel();
            listModel.clear();
            for (Map.Entry<String, String> entry : hashSet) {
                listModel.addElement(entry.getKey());

            }
            jListDisplayScripts.setModel(listModel);
        }

    }
    /**StanfordCoreNLP pip, due to the exec time taken to prepare 
     * the library for exec I preferred  to initialise it immediately 
     * the program is started.
     * @return pipeline
     */
    public static StanfordCoreNLP pip() {
        Properties props = new Properties();
        props.setProperty("annotators", "tokenize,ssplit, pos,lemma");
        //props.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, parse, dcoref");
        StanfordCoreNLP pipeline = new StanfordCoreNLP(props);
        return pipeline;
    }

    private String getExtention(String path) {
        int dot = path.lastIndexOf(".");
        String extension = path.substring(dot + 1);
        return extension;
    }
    private void jMenuDownloadScriptsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuDownloadScriptsMouseClicked
        // TODO add your handling code here:;

        if (evt.getSource() == jMenuDownloadScripts) {
            readFolder();
        }
    }//GEN-LAST:event_jMenuDownloadScriptsMouseClicked
    private void initialiseStanfordLib(){
       SwingWorker swi;
        swi = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {;
                pip();
                Object me = new Object();
                return me;
            }

        };
        swi.execute();
    }
    private void startThread() {
        SwingWorker swi;
        swi = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {;
                jMenuItemPlagiarismChart.setEnabled(true);

                int progress = 0;
                runPlagTest rn = new runPlagTest();
                rn.getFiles(backContainer);
                jProgressBar1.setValue(0);
                jProgressBar1.setVisible(true);
                jProgressBar1.setStringPainted(true);
                progress += 10;
                customCoded cn = new customCoded();
                progress += 10;
                cn.recogniseStopWords();
                progress += 10;
                cn.generateTF();
                progress += 10;
                jProgressBar1.setValue(progress);
                cn.checkIDF();
                progress += 10;
                jProgressBar1.setValue(progress);
                cn.calTFIDF();
                progress += 10;
                cn.calculateCosineSimiilarity();
                progress += 10;
                jProgressBar1.setValue(progress);
                cn.populatePlagiarismList(jListPlagiarismCheck);
                progress += 10;
                CosineValues = new HashMap<>();
                progress += 10;
                CosineValues = cn.returnMap();
                progress += 10;
                jProgressBar1.setValue(progress);
                jProgressBar1.setVisible(false);
                Object me = new Object();
                return me;
            }

        };
        swi.execute();
    }
    private void jMenuRunPlagCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRunPlagCheckMouseClicked
        startThread();
    }//GEN-LAST:event_jMenuRunPlagCheckMouseClicked
    public String updateEmail() {
        String emailValue = null;

        if (variableScriptName == null) {
            emailValue = "";
            return emailValue;
        } else {
            String emailAddre = regNo();
            try {
                DatabaseConnection cnn = new DatabaseConnection();
                myConn = cnn.myconnection();
                myStmt = myConn.prepareStatement("SELECT email FROM submission WHERE regno =?");
                myStmt.setString(1, emailAddre);
                myRs = myStmt.executeQuery();
                while (myRs.next()) {
                    emailValue = myRs.getString(1);
                }
                //emailValue = myRs.getString(1);
            } catch (SQLException ex) {
                Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return emailValue;
    }

    public String regNo() {
        int endIndex = variableScriptName.indexOf(".");
        String regNo = variableScriptName.substring(0, endIndex);
        return regNo;
    }
    private void jButtonFeedBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFeedBackActionPerformed
        String RegNo = regNo(), Email = updateEmail();
        FeedBackDialog fb = new FeedBackDialog(this, rootPaneCheckingEnabled, RegNo, Email);
        fb.setVisible(true);
    }//GEN-LAST:event_jButtonFeedBackActionPerformed


    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed
 private void swingWorkerDisplayScripts(String canonicalPath){
       SwingWorker swi;
        swi = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {;
               vw.convertToImage(canonicalPath, jTextPaneMarkSpace);
                Object me = new Object();
                return me;
            }

        };
        swi.execute();
    }
    private void jListDisplayScriptsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDisplayScriptsValueChanged
        jButtonComplete.setBackground(Color.lightGray);
        jButtonInComplete.setBackground(Color.lightGray);
        String scriptName;
        if (!jListDisplayScripts.getValueIsAdjusting()) {
            scriptName = jListDisplayScripts.getSelectedValue();
            if (scriptName.isEmpty()) {
                return;
            } else {
                variableScriptName = scriptName;
                String canonicalPath = tempFileHolder.get(scriptName);
                /**
                 * When displaying scripts from the database, it may be
                 * difficult to get the filepath because only the file name was
                 * stored in the database A feasible option is to search the
                 * system file system for the existence of such file since one
                 * of the characteristics of the file system is uniqueness. it
                 * is great to search the file sysxtem and if it exists, then we
                 * retrieve the file from the C drive.
                 */
                //   vw.displayPDF(jPanelGrader, canonicalPath);
                swingWorkerDisplayScripts(canonicalPath);
                this.revalidate();
                canMark = true;
                currentScript = scriptName;
                CurrentScore.clear();
                jButtonComplete.setEnabled(true);
                jButtonInComplete.setEnabled(true);
                jButtonFeedBack.setEnabled(true);
                jButtonCloseDoc.setEnabled(true);
                jButtonSaveDoc.setEnabled(true);
                checkStatus();
                jButtonAdd.setEnabled(true);
                jButtonSub.setEnabled(true);
                jTextFieldAddScore.setEnabled(true);
                jTextFieldSubScore.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jListDisplayScriptsValueChanged

    private void jListPlagiarismCheckValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListPlagiarismCheckValueChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_jListPlagiarismCheckValueChanged

    private void jMenuItemPlagiarismChartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemPlagiarismChartMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jMenuItemPlagiarismChartMouseClicked

    private void jMenuItemPlagiarismChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlagiarismChartActionPerformed
        // TODO add your handling code here:
        if (CosineValues.isEmpty()) {
            jMenuItemPlagiarismChart.setToolTipText("No Plagiarism check have been run");
            return;
        }

        if (evt.getSource() == jMenuItemPlagiarismChart) {
            PlagiarismResult PR = new PlagiarismResult(this, false, CosineValues);
            PR.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItemPlagiarismChartActionPerformed

    private void jMenuItemStudentPerformanceReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemStudentPerformanceReportMouseClicked


    }//GEN-LAST:event_jMenuItemStudentPerformanceReportMouseClicked

    private void jMenuItemStudentPerformanceReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStudentPerformanceReportActionPerformed
//        String[] assgnDetail = getAssignDetails();
//        String CourseID, assignId;
//        CourseID = assgnDetail[0];
//        assignId = assgnDetail[1];
        String Sqlstmt = "SELECT regNo, score FROM graded WHERE CourseID='csc404' AND assignId='cs41a'";
        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement(Sqlstmt);
//            myStmt.setString(1, CourseID);
//            myStmt.setString(2, assignId);
            myRs = myStmt.executeQuery(Sqlstmt);
            JOptionPane.showMessageDialog(this, "Request Successfully Sent");
//            while (myRs.next()) {
//                regNo = myRs.getString("regNo");
//                score = myRs.getDouble("score");
//            }
            GenerateStudentPerformanceReport gen = new GenerateStudentPerformanceReport(this, rootPaneCheckingEnabled, myRs);
            gen.setVisible(true);
            gen.setLocationRelativeTo(null);
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jMenuItemStudentPerformanceReportActionPerformed


    private void jButtonSaveDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDocActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File filePath = fileChooser.getSelectedFile();
            String fileName = fileChooser.getName(filePath);

            System.out.println("Save as file: " + filePath.getAbsolutePath());
            Dimension size = jTextPaneMarkSpace.getSize();
            BufferedImage image = new BufferedImage(
                    size.width, size.height, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            jTextPaneMarkSpace.paint(g2);
            try {
                ImageIO.write(image, "png", new File(filePath + ".png"));
                System.out.println("Panel saved as Image.");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonSaveDocActionPerformed

    private void jButtonCloseDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseDocActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(this,
                "Do you want to Close the Document?",
                "CLose?",
                JOptionPane.YES_NO_OPTION);
        if ((n == JOptionPane.YES_OPTION)) {
            vw.closeDocument();
            jTextPaneMarkSpace.removeAll();  //yet to find code for removing content of component
            jTextPaneMarkSpace.revalidate();

        }

    }//GEN-LAST:event_jButtonCloseDocActionPerformed
    public String[] getAssignDetails() {
        String[] details = new String[2];
        JTextField courseId = new JTextField(10);
        JTextField assignId = new JTextField(10);

        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Course I.D:"));
        myPanel.add(courseId);
        myPanel.add(Box.createHorizontalStrut(20)); // a spacer
        myPanel.add(new JLabel("Assign I.D:"));
        myPanel.add(assignId);

        int result = JOptionPane.showConfirmDialog(null, myPanel,
                "Please Enter Course I.D and Assignment I.D Values", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            details[0] = courseId.getText();
            details[1] = assignId.getText();
            System.out.println("Course I.D: " + courseId.getText());
            System.out.println("Assign I.D: " + assignId.getText());
        }
        return details;
    }

    private void jMenuItemCreateAssgnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreateAssgnActionPerformed
        String[] assgnDetail = getAssignDetails();
        String CourseID, assignId;
        CourseID = assgnDetail[0];
        assignId = assgnDetail[1];

        String Sqlstmt = "INSERT INTO assignment (CourseID,assignId)  VALUES"
                + "(?,?);";
        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement(Sqlstmt);
            myStmt.setString(1, CourseID);
            myStmt.setString(2, assignId);
            myStmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Assignment Successfully Created");

        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemCreateAssgnActionPerformed

    private void jMenuItemFeedBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFeedBackActionPerformed
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();
        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement("SELECT regNo,assignId,courseId FROM information");
            myRs = myStmt.executeQuery();
            while (myRs.next()) {
                String tempregNo = myRs.getString("regNo");
                String tempassignId = myRs.getString("assignId");
                String tempcourseId = myRs.getString("courseId");
                listModel.addElement(tempregNo + "-" + tempassignId + "-" + tempcourseId);
            }
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }

        jListDisplayFeedBack.setModel(listModel);

    }//GEN-LAST:event_jMenuItemFeedBackActionPerformed

    private void jMenuItemClrScriptListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClrScriptListActionPerformed
        DefaultListModel listModel = (DefaultListModel) jListDisplayScripts.getModel();
        if (!(jListDisplayScripts.isSelectionEmpty())) {
            jListDisplayScripts.getSelectedIndices();
            listModel.remove(jListDisplayScripts.getSelectedIndex());
        } else {
            listModel.removeAllElements();
        }
    }//GEN-LAST:event_jMenuItemClrScriptListActionPerformed

    private void jMenuItemClearPlagListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearPlagListActionPerformed
        DefaultListModel listModel = (DefaultListModel) jListPlagiarismCheck.getModel();
        if (!(jListPlagiarismCheck.isSelectionEmpty())) {
            jListPlagiarismCheck.getSelectedIndices();
            listModel.remove(jListPlagiarismCheck.getSelectedIndex());
        } else {
            listModel.removeAllElements();
        }
    }//GEN-LAST:event_jMenuItemClearPlagListActionPerformed

    private void jMenuItemClearFeedBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearFeedBackActionPerformed

        DefaultListModel listModel = (DefaultListModel) jListDisplayFeedBack.getModel();
        if (!(jListDisplayFeedBack.isSelectionEmpty())) {
            jListDisplayFeedBack.getSelectedIndices();
            listModel.remove(jListDisplayFeedBack.getSelectedIndex());
        } else {
            listModel.removeAllElements();
        }
    }//GEN-LAST:event_jMenuItemClearFeedBackActionPerformed

    private void jListDisplayFeedBackValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDisplayFeedBackValueChanged
        this.revalidate();
        String feedbacks = null;
        String regNo, assignId, courseId = null;
        String selected;
        if (!jListDisplayFeedBack.getValueIsAdjusting()) {
            selected = jListDisplayFeedBack.getSelectedValue();
            String[] siv = selected.split("-");
            regNo = siv[0];
            assignId = siv[1];
            courseId = siv[2];
            try {
                DatabaseConnection cnn = new DatabaseConnection();
                myConn = cnn.myconnection();
                myStmt = myConn.prepareStatement("SELECT feedback FROM information WHERE regNo=? AND assignId=? AND courseId=?");
                myStmt.setString(1, regNo);
                myStmt.setString(2, assignId);
                myStmt.setString(3, courseId);
                myRs = myStmt.executeQuery();
                while (myRs.next()) {
                    feedbacks = myRs.getString(1);
                }
            } catch (SQLException ex) {
                Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.revalidate();
            feedBackDisplay fbd = new feedBackDisplay(this, false, feedbacks);
            fbd.setLocationRelativeTo(this);
            fbd.setVisible(true);
        }
    }//GEN-LAST:event_jListDisplayFeedBackValueChanged
    private void UpdateScore(String regNo, Double score, int statusFlag) {
        Date date = Date.valueOf(LocalDate.now());
        for (Double double1 : CurrentScore) {
            score += double1;
        }
        System.out.println(score);
        Double penalty = Double.parseDouble(jTextFieldPen.getText());
        Double ActualScore = penalty - score;
        jTextFieldTTS.setText(score.toString());
        jTextFieldObt.setText(ActualScore.toString());

        int n = JOptionPane.showConfirmDialog(this,
                "Save to DataBase?",
                "Save?",
                JOptionPane.YES_NO_OPTION);
        if ((n == JOptionPane.YES_OPTION)) {
            String[] assgnDetail = getAssignDetails();
            String CourseID, assignId;
            CourseID = assgnDetail[0];
            assignId = assgnDetail[1];
            String sql = "update graded set score=?,status=? penalty=? datemarked=? WHERE regNo=?)";

            try {
                DatabaseConnection cnn = new DatabaseConnection();
                myConn = cnn.myconnection();
                myStmt = myConn.prepareStatement(sql);
                myStmt.setDouble(1, ActualScore);
                myStmt.setInt(2, statusFlag);
                myStmt.setString(2, regNo);
                myStmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Score Successfully Saved");

            } catch (SQLException ex) {
                Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void registerScore(String regNo, Double score, int statusFlag) {
        Date date = Date.valueOf(LocalDate.now());
        for (Double double1 : CurrentScore) {
            score += double1;
        }
        System.out.println(score);
        Double penalty = Double.parseDouble(jTextFieldPen.getText());
        Double ActualScore = penalty - score;
        jTextFieldTTS.setText(score.toString());
        jTextFieldObt.setText(ActualScore.toString());

        int n = JOptionPane.showConfirmDialog(this,
                "Save to DataBase?",
                "Save?",
                JOptionPane.YES_NO_OPTION);
        if ((n == JOptionPane.YES_OPTION)) {
            String[] assgnDetail = getAssignDetails();
            String CourseID, assignId;
            CourseID = assgnDetail[0];
            assignId = assgnDetail[1];
            String Sqlstmt = "INSERT INTO graded (regNo,assignId, courseId,score,penalty,status,datemarked)  VALUES"
                    + "(?,?,?,?,?,?,?);";
            try {
                DatabaseConnection cnn = new DatabaseConnection();
                myConn = cnn.myconnection();
                myStmt = myConn.prepareStatement(Sqlstmt);
                myStmt.setString(1, regNo);
                myStmt.setString(2, assignId);
                myStmt.setString(3, CourseID);
                myStmt.setDouble(4, score);
                System.out.println(score);
                myStmt.setDouble(5, penalty);
                myStmt.setInt(6, statusFlag);
                myStmt.setDate(7, date);
                myStmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Score Successfully Saved");

            } catch (SQLException ex) {
                Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private String checkStatusN() {
        String regNo = regNo();
        String status = "null";

        String Sqlstmt = "SELECT status FROM graded WHERE regNo=" + regNo;
        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement(Sqlstmt);
            myRs = myStmt.executeQuery();
            if (myRs.next()) {
                status = String.valueOf(myRs.getInt("status"));
            } else {
                return "NOT EXISTING";
            }
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (status.equalsIgnoreCase("1")) {
            return "MARKING COMPLETE";
        } else if (status.equalsIgnoreCase("2")) {
            return "MARKING INCOMPLETE";
        } else {
            return "NOT MARKED";
        }
    }
    private void jButtonCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompleteActionPerformed
        Double score = 0.0;
        String scriptStatus;
        String regNo = regNo();
        if ((isMarkingComplete = true)) {
            statusFlag = 1;
        }
        scriptStatus = checkStatusN();
        switch (scriptStatus) {
            case "MARKING COMPLETE":
                registerScore(regNo, score, statusFlag);
            case "MARKING INCOMPLETE":
                //update database Values 
                UpdateScore(regNo, score, statusFlag);
                break;
            default:
                registerScore(regNo, score, statusFlag);
                break;
        }
    }//GEN-LAST:event_jButtonCompleteActionPerformed
    private String checkStatus() {
        String regNo = regNo();
        String status = "null";
        Double CurrtScore = 0.0;
        String Sqlstmt = "SELECT status FROM graded WHERE regNo=" + regNo;
        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement(Sqlstmt);
            myRs = myStmt.executeQuery();
            if (myRs.next()) {
                status = String.valueOf(myRs.getInt("status"));
            } else {
                return null;
            }
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (status.equalsIgnoreCase("1")) {
            jButtonComplete.setBackground(Color.green);
            return "MARKING COMPLETE";
        } else if (status.equalsIgnoreCase("2")) {
            jButtonInComplete.setBackground(Color.blue);
            //Display oldScore to the user and update the currentScore list with old score

            Double oldScore = 0.0;
            //get the value of the currrentScore from the recent marked score in the database
            try {
                String mySql = "SELECT score FROM graded WHERE regNo= " + regNo;
                DatabaseConnection cnn = new DatabaseConnection();
                myConn = cnn.myconnection();
                myStmt = myConn.prepareStatement(mySql);
                myRs = myStmt.executeQuery();
                myRs.next();
                oldScore = myRs.getDouble("score");   //there is an issue here
                System.out.println(oldScore);

                CurrentScore.clear();
                CurrentScore.add(oldScore);
                //display it back to the user for consistency sake
                jTextFieldOldScore.setText(String.valueOf(oldScore));
                for (Double double1 : CurrentScore) {
                    CurrtScore += double1;
                }
                jTextFieldCurrentScore.setText(String.valueOf(CurrentScore));
            } catch (SQLException ex) {
                Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
            }
            return "MARKING INCOMPLETE";
        } else {
            return null;
        }

    }
    private void jButtonInCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInCompleteActionPerformed
        Double score = 0.0;
        String scriptStatus;
        String regNo = regNo();
        if ((isMarkingComplete = true)) {
            statusFlag = 2;
        }
        scriptStatus = checkStatusN();
        switch (scriptStatus) {
            case "MARKING COMPLETE":
                //Update database Values
                UpdateScore(regNo, score, statusFlag);
            case "MARKING INCOMPLETE":
                //Update database Values
                UpdateScore(regNo, score, statusFlag);
                break;
            default:
                registerScore(regNo, score, statusFlag);
                break;
        }


    }//GEN-LAST:event_jButtonInCompleteActionPerformed

    private void jMenuItemViewGradedScriptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewGradedScriptsActionPerformed
        String DBValue = null;
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();

        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement("SELECT * FROM graded WHERE status =?");
            myStmt.setString(1, "1");
            myRs = myStmt.executeQuery();
            while (myRs.next()) {
                DBValue = myRs.getString(1);
                listModel.addElement(DBValue);
            }
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }
        jListDisplayScripts.setModel(listModel);
    }//GEN-LAST:event_jMenuItemViewGradedScriptsActionPerformed

    private void jMenuItemViewUngradedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewUngradedActionPerformed
        String DBValue = null;
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();

        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement("SELECT * FROM graded WHERE status =?");
            myStmt.setString(1, "null");
            myRs = myStmt.executeQuery();
            while (myRs.next()) {
                DBValue = myRs.getString(1);
                listModel.addElement(DBValue);
            }
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }
        jListDisplayScripts.setModel(listModel);

    }//GEN-LAST:event_jMenuItemViewUngradedActionPerformed

    private void jMenuItemViewPartiallyGradedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewPartiallyGradedActionPerformed
        String DBValue = null;
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();

        try {
            DatabaseConnection cnn = new DatabaseConnection();
            myConn = cnn.myconnection();
            myStmt = myConn.prepareStatement("SELECT * FROM graded WHERE status =?");
            myStmt.setString(1, "2");
            myRs = myStmt.executeQuery();
            while (myRs.next()) {
                DBValue = myRs.getString(1);
                listModel.addElement(DBValue);
            }
        } catch (SQLException ex) {
            Logger.getLogger(eGrader_Worker.class.getName()).log(Level.SEVERE, null, ex);
        }
        jListDisplayScripts.setModel(listModel);
    }//GEN-LAST:event_jMenuItemViewPartiallyGradedActionPerformed

    private void jTextFieldAddScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAddScoreActionPerformed
        // TODO add your handling code here:
        Double addedmark = Double.parseDouble(jTextFieldAddScore.getText());
        CurrentScore.add(addedmark);
    }//GEN-LAST:event_jTextFieldAddScoreActionPerformed

    private void jTextFieldSubScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSubScoreActionPerformed
        // TODO add your handling code here:
        Double Submark = Double.parseDouble(jTextFieldAddScore.getText());
        int width = CurrentScore.size();
        Double intermed = CurrentScore.get(width);
        if (Submark > intermed) {
            Double CurrtScore = 0.0;
            for (Double double1 : CurrentScore) {
                CurrtScore += double1;
            }
            CurrtScore = -Submark;
            CurrentScore.clear();
            CurrentScore.add(CurrtScore);
        } else {
            Double med = intermed - Submark;
            CurrentScore.remove(width);
            CurrentScore.add(med);
        }
    }//GEN-LAST:event_jTextFieldSubScoreActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dispose();
        eGraderLogin e = new eGraderLogin();
        e.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextPaneMarkSpaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextPaneMarkSpaceMouseClicked
        jButtonComplete.setBackground(Color.lightGray);
        jButtonInComplete.setBackground(Color.lightGray);
        if (SwingUtilities.isRightMouseButton(evt)) {
            Point p = MouseInfo.getPointerInfo().getLocation();
            x = p.x;
            y = p.y;
            Graphics g = getGraphics();
            Marker2 mk = new Marker2(this, true, x, y, g, canMark, jTextPaneMarkSpace);
            mk.setLocation(p);
            mk.setVisible(true);
        }
    }//GEN-LAST:event_jTextPaneMarkSpaceMouseClicked
    /**
     * Returns an ImageIcon, or null if the path was invalid. /** Returns an
     * ImageIcon, or null if the path was invalid.
     */

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Window".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(eGrader_Worker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SmartGrader_Worker().setVisible(true);
//            }
//        });

        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new eGrader_Worker().setVisible(true);
//            }
//        });
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCloseDoc;
    private javax.swing.JButton jButtonComplete;
    private javax.swing.JButton jButtonFeedBack;
    private javax.swing.JButton jButtonInComplete;
    private javax.swing.JButton jButtonSaveDoc;
    private javax.swing.JButton jButtonSub;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jListDisplayFeedBack;
    private javax.swing.JList<String> jListDisplayScripts;
    private javax.swing.JList<String> jListPlagiarismCheck;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDownloadScripts;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItemClearFeedBack;
    private javax.swing.JMenuItem jMenuItemClearPlagList;
    private javax.swing.JMenuItem jMenuItemClrScriptList;
    private javax.swing.JMenuItem jMenuItemCreateAssgn;
    private javax.swing.JMenuItem jMenuItemFeedBack;
    private javax.swing.JMenuItem jMenuItemPlagiarismChart;
    private javax.swing.JMenuItem jMenuItemStudentPerformanceReport;
    private javax.swing.JMenuItem jMenuItemViewGradedScripts;
    private javax.swing.JMenuItem jMenuItemViewPartiallyGraded;
    private javax.swing.JMenuItem jMenuItemViewUngraded;
    private javax.swing.JMenu jMenuRunPlagCheck;
    private javax.swing.JMenu jMenuUXX;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanelFooter;
    private javax.swing.JPanel jPanelGrader;
    private javax.swing.JPanel jPanelPlag;
    private javax.swing.JPanel jPanelProp;
    private javax.swing.JPanel jPanelScore;
    private javax.swing.JPanel jPanelViewScript1;
    private javax.swing.JPanel jPanelViewScript2;
    private javax.swing.JPanel jPanelViews;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTextField jTextFieldAddScore;
    private javax.swing.JTextField jTextFieldCurrentScore;
    private javax.swing.JTextField jTextFieldObt;
    private javax.swing.JTextField jTextFieldOldScore;
    private javax.swing.JTextField jTextFieldPen;
    private javax.swing.JTextField jTextFieldSubScore;
    private javax.swing.JTextField jTextFieldTTS;
    private javax.swing.JTextPane jTextPaneMarkSpace;
    // End of variables declaration//GEN-END:variables

}
