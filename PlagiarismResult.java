/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 good resource for xchart 2.5 http://www.programcreek.com/java-api-examples/index.php?api=com.xeiam.xchart.ChartBuilder
 */
package smartGrader.GUI;

import com.xeiam.xchart.BitmapEncoder;
import com.xeiam.xchart.BitmapEncoder.BitmapFormat;
import com.xeiam.xchart.Chart;
import com.xeiam.xchart.ChartBuilder;
import com.xeiam.xchart.Series;
import com.xeiam.xchart.SeriesMarker;
import com.xeiam.xchart.StyleManager.ChartType;
import com.xeiam.xchart.StyleManager.LegendPosition;
import com.xeiam.xchart.XChartPanel;
//import com.xeiam.xchart.internal.chartpart.Axis;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
//import java.util.HashMap;
//import java.util.Map;
import java.util.*;
import static java.util.Locale.filter;
import static java.util.Locale.filter;
import static java.util.Locale.filter;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author LabaPc
 */
public class PlagiarismResult extends javax.swing.JDialog {

    /**
     * Creates new form PlagiarismResult
     */
    Map<String, Map<String, Double>> CosineValues;
    Map<String, Double> value;
    Map<String, Double> result;
    Map<String, Double> obj;
    Chart Picchart = null;
    String currentName = null;
    public String chartTitle = null;
    Chart chart = new ChartBuilder().chartType(ChartType.Bar).width(800).height(400).title("Plagiarism Chart").xAxisTitle("Scripts")
            .yAxisTitle("Similarity Scores").build();

    public PlagiarismResult(java.awt.Frame parent, boolean modal, Map<String, Map<String, Double>> CosineValue) {
        super(parent, modal);
        initComponents();
        System.out.println(CosineValue);
        //   this. CosineValues.putAll(CosineValue);
        this.CosineValues = CosineValue;
        fillComboBox();
        displayScoreToLabel();
    }

    public void fillComboBox() {

        DefaultComboBoxModel<String> dcbm = new DefaultComboBoxModel<>();
        for (String fileName : CosineValues.keySet()) {
            dcbm.addElement(fileName);
        }
        jComboBoxSelectScript.setModel(dcbm);

        displayChart();
    }

    private void displayScoreToLabel() {
        Map<String, Double> mt = new TreeMap<>();
        mt.putAll(result);
        Map.Entry<String, Double> max = mt.entrySet().stream().max(
                Map.Entry.comparingByValue(Double::compareTo)).get();
        Map.Entry<String, Double> min = mt.entrySet().stream().min(
                Map.Entry.comparingByValue(Double::compareTo)).get();
        jLabelPerScore.setText("Max Score: "+max+" Min Score: "+ min); 
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jComboBoxSelectScript = new javax.swing.JComboBox<>();
        jLabelPercPlag = new javax.swing.JLabel();
        jLabelPerScore = new javax.swing.JLabel();
        jButtonSaveChartAsImage = new javax.swing.JButton();
        jScrollPaneChart = new javax.swing.JScrollPane();
        jButtonViewDetailedScore = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(0, 0));
        setMinimumSize(new java.awt.Dimension(350, 350));
        setPreferredSize(new java.awt.Dimension(1200, 700));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jComboBoxSelectScript.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jComboBoxSelectScript.setForeground(new java.awt.Color(0, 0, 204));
        jComboBoxSelectScript.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scripts" }));
        jComboBoxSelectScript.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jComboBoxSelectScript.setMinimumSize(new java.awt.Dimension(86, 30));
        jComboBoxSelectScript.setPreferredSize(new java.awt.Dimension(300, 25));
        jComboBoxSelectScript.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSelectScriptItemStateChanged(evt);
            }
        });
        jComboBoxSelectScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectScriptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jComboBoxSelectScript, gridBagConstraints);

        jLabelPercPlag.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabelPercPlag.setForeground(new java.awt.Color(0, 0, 204));
        jLabelPercPlag.setText("Scores:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 60, 10, 0);
        getContentPane().add(jLabelPercPlag, gridBagConstraints);

        jLabelPerScore.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabelPerScore.setForeground(new java.awt.Color(0, 0, 204));
        jLabelPerScore.setText("00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        getContentPane().add(jLabelPerScore, gridBagConstraints);

        jButtonSaveChartAsImage.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButtonSaveChartAsImage.setForeground(new java.awt.Color(0, 0, 204));
        jButtonSaveChartAsImage.setText("Save Chart  As Image");
        jButtonSaveChartAsImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveChartAsImageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        getContentPane().add(jButtonSaveChartAsImage, gridBagConstraints);

        jScrollPaneChart.setPreferredSize(new java.awt.Dimension(300, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(jScrollPaneChart, gridBagConstraints);
        jScrollPaneChart.getAccessibleContext().setAccessibleName("chart View");

        jButtonViewDetailedScore.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButtonViewDetailedScore.setForeground(new java.awt.Color(0, 0, 204));
        jButtonViewDetailedScore.setText("View Detailed Scores");
        jButtonViewDetailedScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewDetailedScoreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 61, 10, 10);
        getContentPane().add(jButtonViewDetailedScore, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void displayChart() {
        String fileName = (String) jComboBoxSelectScript.getSelectedItem();
        currentName = fileName;
        System.out.println(fileName);
        sortedCosineResult(fileName);
        /**
         * Using the fileName sort the set naturally before getting it seperate
         * X and Y value
         */

        ArrayList<String> xValue = new ArrayList<String>();
        // xValue.addAll(CosineValues.get(fileName).keySet());
        xValue.addAll(result.keySet());
        ArrayList<Double> yValue = new ArrayList<Double>();

        yValue.addAll(result.values());

        renderChart(fileName, xValue, yValue);
        jScrollPaneChart.revalidate();

        jScrollPaneChart.repaint();
        jScrollPaneChart.updateUI();
        this.revalidate();
        this.pack();
    }

    private void sortedCosineResult(String fileName) {
        obj = CosineValues.get(fileName);
        //   obj.putAll(CosineValues.get(fileName));

        result = obj.entrySet().stream()
                .sorted(Map.Entry.comparingByKey(Comparator.naturalOrder()))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
                        (oldValue, newValue) -> oldValue, LinkedHashMap::new));

    }
/**
 * 
 * @param evt 
 * When the ComboBox items are selected, it sends the current
 * FileName to the renderChart function for proper update
 * of the chart pane
 */
    private void jComboBoxSelectScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectScriptActionPerformed
        //   chartMatter chm= new chartMatter(this, rootPaneCheckingEnabled, CosineValues);
        plotChart ch = new plotChart(CosineValues);
        String fileName = (String) jComboBoxSelectScript.getSelectedItem();
        currentName = fileName;
        sortedCosineResult(fileName);
        jScrollPaneChart.setViewportView(ch.renderChart(fileName, chartTitle));
        displayScoreToLabel();
        jScrollPaneChart.revalidate();
        jScrollPaneChart.repaint();
        jScrollPaneChart.updateUI();
        this.revalidate();
        this.pack();
    }//GEN-LAST:event_jComboBoxSelectScriptActionPerformed

    private void jComboBoxSelectScriptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSelectScriptItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBoxSelectScriptItemStateChanged

    private void jButtonSaveChartAsImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveChartAsImageActionPerformed
//        try {
//            // TODO add your handling code here:
//            if (!(Picchart == null) && (chartTitle.equals(null))) {
//                BitmapEncoder.saveBitmap(Picchart, "./" + chartTitle, BitmapFormat.PNG);
//                JOptionPane.showMessageDialog(this,
//                        "Picture Successfully Saved", "SUCCESS",
//                        JOptionPane.PLAIN_MESSAGE);
//            } else {
//                JOptionPane.showMessageDialog(this,
//                        "Error Saving Chart", "WARNING",
//                        JOptionPane.WARNING_MESSAGE);
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
//        }
        try {
            String currentCard = (String) jComboBoxSelectScript.getSelectedItem();
            String saveFileName = currentCard.toLowerCase() + "Chart" + ".jpg";
            // create file filters
            List<String[]> filters = new ArrayList<>();
            filters.add(new String[]{"JPEG Image (.jpg)", "jpg"});
            filters.add(new String[]{"PNG Image (.png)", "png"});
            filters.add(new String[]{"BMP Image (.bmp)", "bmp"});

            // saving chart
            JFileChooser saveChartFileChooser = new JFileChooser();
            String desc = saveChartFileChooser.getFileFilter().getDescription();
            String ext = "jpg";
            FileFilter imageFilter = new FileNameExtensionFilter(
                    "Image files", ImageIO.getReaderFileSuffixes());
            saveChartFileChooser.setAcceptAllFileFilterUsed(false);
            saveChartFileChooser.addChoosableFileFilter(imageFilter);
            int userSelection = saveChartFileChooser.showSaveDialog(this);
            if (userSelection == saveChartFileChooser.APPROVE_OPTION) {
                saveChartFileChooser.getCurrentDirectory();
            }

            for (String[] ff : filters) {
                if (ff[0].toLowerCase().equals(desc.toLowerCase())) {
                    ext = ff[1].toLowerCase();
                    break;
                }
            }
            ;
            //   File saveFile = saveChartFileChooser.getSelectedFile().getName();
            String saveFile = saveChartFileChooser.getSelectedFile().getCanonicalPath();
            switch (ext) {
                case "jpg":
                    BitmapEncoder.saveBitmap(chart, saveFile, BitmapFormat.JPG);
                    break;
                case "png":
                    BitmapEncoder.saveBitmap(chart, saveFile, BitmapFormat.PNG);
                    break;
                case "bmp":
                    BitmapEncoder.saveBitmap(chart, saveFile, BitmapFormat.BMP);
                    break;
                default:
                    BitmapEncoder.saveBitmap(chart, saveFile, BitmapFormat.JPG);
            }
            JOptionPane.showMessageDialog(this,
                    "Picture Successfully Saved", "SUCCESS",
                    JOptionPane.PLAIN_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(PlagiarismResult.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSaveChartAsImageActionPerformed

    private void jButtonViewDetailedScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewDetailedScoreActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        displayPlagScores dpsc = new displayPlagScores(frame, false, result, currentName);
        dpsc.setTitle(currentName + " Similarity Scores");
        dpsc.writeScore();
        dpsc.setLocationRelativeTo(null);
        dpsc.setVisible(true);
        
    }//GEN-LAST:event_jButtonViewDetailedScoreActionPerformed

    /**
     * @param args the command line arguments
     */
    public JPanel renderChart(String title, ArrayList<String> xValue, ArrayList<Double> yValue) {
        Series series = null;
        Picchart = chart;
        chartTitle = title;
        chart.getStyleManager().setLegendPosition(LegendPosition.InsideNE);
        chart.getStyleManager().setPlotGridLinesVisible(true);
        //chart.getStyleManager().set
        chart.getStyleManager().setBarWidthPercentage(0.3);
        chart.getStyleManager().setYAxisMax(1.1);
        chart.getStyleManager().setChartFontColor(Color.BLACK);
        chart.getStyleManager().setChartTitleFont(new Font("Century Gothic", Font.PLAIN, 14));
        // add series
        series = chart.addSeries("Plagiarism Scores", xValue, yValue);

        series.setMarker(SeriesMarker.NONE);
        XChartPanel xchartPanel = new XChartPanel(chart);
        jScrollPaneChart.setViewportView(xchartPanel);
        xchartPanel.setPreferredSize(new Dimension(50 * CosineValues.size(), 500));
        xchartPanel.setMinimumSize(new Dimension(50 * CosineValues.size(), 500));
        xchartPanel.setMaximumSize(new Dimension(50 * CosineValues.size(), 500));
        xchartPanel.revalidate();
        xchartPanel.repaint();
        xchartPanel.validate();

        return xchartPanel;
    }

//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PlagiarismResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PlagiarismResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PlagiarismResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PlagiarismResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                PlagiarismResult dialog = new PlagiarismResult(new javax.swing.JFrame(), true, CosineValues);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSaveChartAsImage;
    private javax.swing.JButton jButtonViewDetailedScore;
    private javax.swing.JComboBox<String> jComboBoxSelectScript;
    private javax.swing.JLabel jLabelPerScore;
    private javax.swing.JLabel jLabelPercPlag;
    private javax.swing.JScrollPane jScrollPaneChart;
    // End of variables declaration//GEN-END:variables
}
